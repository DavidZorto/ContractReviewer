"""
Django settings for ContractReviewer project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url  # Allows easy database URL handling
from dotenv import load_dotenv
import boto3
from django.conf import settings
from django.core.files.storage import default_storage
from storages.backends.s3boto3 import S3Boto3Storage

load_dotenv()  # Load environment variables from .env





# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Enable Whitenoise compression and caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bsez9q=ndng706rq4lm_(38q^-r8+d1b!r*l^m_5u8ym1h^vs)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = [
    'contractreviewer.onrender.com',  # Your Render domain
    '127.0.0.1',  # Localhost for testing
    'localhost'
]

SITE_DOMAIN = os.getenv('SITE_DOMAIN', 'http://127.0.0.1:8000')
SESSION_COOKIE_SECURE = os.getenv('DJANGO_ENV') == 'production'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Kinde',
    'Homepage',
    'Dashboard',
    'Documents',
    'storages',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'ContractReviewer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ContractReviewer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

database_url = os.getenv('DATABASE_URL')
print(f"Connecting to database: {database_url.split('@')[1] if '@' in database_url else 'local'}")

DATABASES = {

    'default': dj_database_url.config(
        default= 'DATABASE_URL',  # Use your existing DATABASE_URL
        conn_max_age=600,
    )

}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SESSION_COOKIE_HTTPONLY = True

AUTH_USER_MODEL = 'Kinde.CustomUser'


# Cloudflare R2 Credentials
R2_ACCESS_KEY_ID = os.getenv('R2_ACCESS_KEY_ID')
R2_SECRET_ACCESS_KEY = os.getenv('R2_SECRET_ACCESS_KEY')
R2_BUCKET_NAME = os.getenv('R2_BUCKET_NAME')
R2_ENDPOINT_URL = os.getenv('R2_ENDPOINT_URL')  # Example: https://YOUR_ACCOUNT_ID.r2.cloudflarestorage.com
R2_REGION = os.getenv("R2_REGION", "auto") 
R2_FILE_STORAGE = os.getenv("R2_FILE_STORAGE", "auto")
# Storage Configuration
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
AWS_S3_ENDPOINT_URL = R2_ENDPOINT_URL  # Use Cloudflare R2 URL
AWS_ACCESS_KEY_ID = R2_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = R2_SECRET_ACCESS_KEY
AWS_S3_REGION_NAME = R2_REGION 
AWS_STORAGE_BUCKET_NAME = R2_BUCKET_NAME
AWS_S3_ADDRESSING_STYLE = "virtual"  # Required for Cloudflare R2
AWS_QUERYSTRING_AUTH = False  # Disable query string auth for public access
AWS_S3_CUSTOM_DOMAIN = f"{R2_BUCKET_NAME}.{R2_ENDPOINT_URL.replace('https://', '')}"

# Additional S3Boto3 Settings for R2
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_S3_USE_SSL = True
AWS_S3_VERIFY = True

AWS_S3_CONFIG = {
    'addressing_style': 'virtual',
    'signature_version': 's3v4',
}

print("Storage Configuration:")

print(f"AWS_S3_ENDPOINT_URL: {AWS_S3_ENDPOINT_URL}")
print(f"AWS_ACCESS_KEY_ID set: {'Yes' if AWS_ACCESS_KEY_ID else 'No'}")
print(f"AWS_SECRET_ACCESS_KEY set: {'Yes' if AWS_SECRET_ACCESS_KEY else 'No'}")
print(f"AWS_STORAGE_BUCKET_NAME: {AWS_STORAGE_BUCKET_NAME}")

# Add this to your existing settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'Documents.storage': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
# Ensure default_storage is properly set
default_storage._wrapped = S3Boto3Storage()
print(f"DEFAULT_FILE_STORAGE: {DEFAULT_FILE_STORAGE}")

